{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "duplicatfile",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "Aggregate1"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Aggregate2"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Union1"
				}
			],
			"script": "source(output(\n\t\tDate as string,\n\t\tempname as string,\n\t\tsalary as string,\n\t\tdeptid as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource(output(\n\t\tDate as string,\n\t\tempname as string,\n\t\tsalary as string,\n\t\tseqno as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source2\nsource(output(\n\t\tDate as string,\n\t\tempname as string,\n\t\tsalary as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source3\nsource1 aggregate(groupBy(deptid),\n\teach(match(name != 'deptid'), $$ = first($$))) ~> Aggregate1\nAggregate1 sort(desc(salary, true)) ~> Sort1\nsource2 aggregate(column1 = max(seqno)) ~> Aggregate2\nsource3 keyGenerate(output(seqno as long),\n\tstartAt: 1L) ~> SurrogateKey1\nAggregate2, SurrogateKey1 join(1==1,\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nJoin1 derive(seqno = toString(toInteger(seqno) + toFloat(column1))) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tDate,\n\t\tempname,\n\t\tsalary,\n\t\tseqno\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1, source2 union(byName: true)~> Union1"
		}
	}
}